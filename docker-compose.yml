version: '3.8'

services:
  # NestJS Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestjs-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - APP_NAME=Backend
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=info
      - API_PREFIX=api
      - GRAPHQL_PLAYGROUND=true
      - JWT_SECRET=secret
      - JWT_EXPIRATION_TIME=1h
      - KAFKA_CLIENT_ID=my-client
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_GROUP_ID=my-group
      - KAFKA_SSL=false
      - KAFKA_SASL_MECHANISM=plain
      - KAFKA_SASL_USERNAME=my_username
      - KAFKA_SASL_PASSWORD=my_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=my_redis_password
      - REDIS_DB=0
      - REDIS_TTL=3600
      - MONGO_URI=mongodb://mongo:27017/mongo
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/postgres
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - BCRYPT_HASH_FACTOR=16
    depends_on:
      - postgres
      - mongo
      - redis
      - kafka
    networks:
      - app-network
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules

  # PostgreSQL Service
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # MongoDB Service
  mongo:
    image: mongo:6
    container_name: mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass my_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Zookeeper Service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    restart: unless-stopped
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    networks:
      - app-network

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
  mongo_data:
  redis_data: